#!/usr/bin/env node

var fs = require('fs');
var path = require('path');
var inquirer = require("inquirer");
var request = require('request');
var program = require('commander')
var chalk = require('chalk');
var _ = require('lodash');
var map = require('map-stream');
var Table = require('cli-table');
var backbase = chalk.gray([" ____             _    _                     ", "| __ )  __ _  ___| | _| |__   __ _ ___  ___  ", "|  _ \\ / _` |/ __| |/ / '_ \\ / _` / __|/ _ \\ ", "| |_) | (_| | (__|   <| |_) | (_| \\__ \\  __/ ", "|____/ \\__,_|\\___|_|\\_\\_.__/ \\__,_|___/\\___| "].join('\n') + '\n')

//Gulp Modules
var gulp = require('gulp');
var template = require('gulp-template');
var rename = require('gulp-rename');
var conflict = require('gulp-conflict');
var gulpFilter = require('gulp-filter');

//Config
var templatesDir = path.join(__dirname, '..', 'templates');
var homeDir = process.env.HOME || process.env.HOMEPATH || process.env.USERPROFILE;
// var PORTAL_PORT = 7777;
var symbols = {
	ok: '✓',
	err: '✖',
	dot: '․'
}

console.log(backbase)

//API
var bbscaff = module.exports = function(template_dir){
	this.template_dir = template_dir
};

bbscaff.prototype.getCurrentBundle = function(){
	return process.cwd().split(path.sep).slice(-2)[0];
}

bbscaff.prototype.request = function(url, content, request_callback){
	request({
		'auth': {
			'user': 'admin',
			'pass': 'admin'
		},
		method: 'POST',
		url: url,
		body: content,
		headers: {
			'Content-Type': 'application/xml'
		}
	}, request_callback)
}

bbscaff.prototype.generate = function(answers, destination_path, callback){
	var excludeImages = gulpFilter(['**/*', '!**/*.jpg', '!**/*.png', '!**/*.gif']);

	gulp.src(this.template_dir + '/**/*')
		.pipe(excludeImages)
		.pipe(template(answers))
		.pipe(excludeImages.restore())
		.pipe(rename(function(path){
			_.each(answers, function(answer, key){
				path.basename = path.basename.split('{' + key + '}').join(answer)
			})
		}))
		.pipe(conflict('./'))
		.pipe(gulp.dest(destination_path))
		.on('end', function(){
			if(typeof callback == 'function') callback()
		})
}

bbscaff.prototype.prompt = function(questions, callback){
	inquirer.prompt(questions, function(answers){
		if(typeof callback == 'function') callback(answers)
	})
}

bbscaff.prototype.logError = function(msg){
	console.log(chalk.red(symbols.err + ' ') + chalk.gray(msg))
}

bbscaff.prototype.logSuccess = function(msg_white, msg_gray) {
	console.log(chalk.green(symbols.ok + ' ') + msg_white + ' ' + chalk.gray(msg_gray))
}

program
	.version('0.0.7')
	// .option('-p, --port <n>', 'Set portalserver custom port. Default: 7777')

program
	.command('generate <template>')
	.description('scaffold widgets and containers')
	.action(function(template){
		// PORTAL_PORT = program.port || PORTAL_PORT;

		fs.exists(path.join(homeDir, '.bbscaff', template), function(exists){
			if(exists) {
				console.log(chalk.gray('Generating ' + template + ' on path: ' + process.cwd()))
				require(path.join(homeDir, '.bbscaff', template, 'bbscaff'))(new bbscaff(path.join(homeDir, '.bbscaff', template, 'template')))
			} else {
				fs.exists(path.join(templatesDir, template), function(exists){
					if(exists) {
						console.log(chalk.gray('Generating ' + template + ' on path: ' + process.cwd()))
						require(path.join(templatesDir, template, 'bbscaff'))(new bbscaff(path.join(templatesDir, template, 'template')))
					} else {
						console.log(chalk.red(symbols.err + ' ') + chalk.gray('Template not found'))
					}
				})
			}
		})
	});

program
	.command('list')
	.description('show available templates')
	.action(function(){

		console.log(chalk.green('Available templates:'))
		console.log(chalk.gray('Note: templates defined in your home folder overrides default templates.'))

		var foundTemplates = [];

		var table = new Table({
			head: ['Template name', 'Path']
		});

		gulp.src([path.join(homeDir, '.bbscaff', '**/bbscaff.js'), path.join(templatesDir, '**/bbscaff.js')])
			.pipe(map(function(file, cb){
				var templatePath = path.dirname(file.path);
				var templateName = _.last(templatePath.split(path.sep));

				if(_.indexOf(foundTemplates, templateName) == -1) {
					table.push([templateName, chalk.gray(templatePath)])
					// console.log(chalk.bgGreen(templateName) + ' ' + chalk.gray(templatePath))
				} else {
					// console.log(chalk.gray(templateName) + ' ' + chalk.gray(templatePath))
				}

				foundTemplates.push(templateName)
				cb();
			}))
			.on('end', function(){
				console.log(table.toString());
			})

	})

var args = process.argv;
if(args.length < 3) {
	args.push('list')
}
program.parse(args);