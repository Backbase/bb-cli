#!/usr/bin/env node

var fs = require('fs');
var path = require('path');
var inquirer = require("inquirer");
var request = require('request');
var program = require('commander')
var chalk = require('chalk');
var _ = require('lodash');
var backbase = chalk.gray([" ____             _    _                     ", "| __ )  __ _  ___| | _| |__   __ _ ___  ___  ", "|  _ \\ / _` |/ __| |/ / '_ \\ / _` / __|/ _ \\ ", "| |_) | (_| | (__|   <| |_) | (_| \\__ \\  __/ ", "|____/ \\__,_|\\___|_|\\_\\_.__/ \\__,_|___/\\___| "].join('\n') + '\n')

//Gulp Modules
var gulp = require('gulp');
var template = require('gulp-template');
var rename = require('gulp-rename');
var conflict = require('gulp-conflict');

//Config
var templatesDir = path.join(__dirname, '..', 'templates');
var PORTAL_PORT = 7777;
var symbols = {
	ok: '✓',
	err: '✖',
	dot: '․'
}

console.log(backbase)

program
	.version('0.0.5')
	.option('-p, --port <n>', 'Set portalserver custom port. Default: 7777')

program
	.command('generate <type>')
	.description('scaffold widgets and containers')
	.action(function(type){

		PORTAL_PORT = program.port || PORTAL_PORT;

		if('widget' == type) {
			console.log(chalk.gray('You are about to create a widget in the path: ' + process.cwd()))

			inquirer.prompt([
				{name: 'widget_title', message: 'Widget title'},
				{name: 'widget_name', message: 'Widget name'},
				{name: 'bundle_name', message: 'Bundle name', 'default': getCurrentBundle()},
			], function(answers){

				gulp.src(templatesDir + '/widget/**/*')
					.pipe(template(answers))
					.pipe(rename(function(path){
						_.each(answers, function(answer, key){
							path.basename = path.basename.split('{' + key + '}').join(answer)
						})
					}))
					.pipe(conflict('./'))
					.pipe(gulp.dest(answers.widget_name))
					.on('end', function(){
						inquirer.prompt({
							name: 'add_widget',
							type: 'confirm',
							message: 'Do you want to add this widget to your Enterprise Catalog?'
						}, function(answer){
							if(answer.add_widget){
								postWidget(path.join(process.cwd(), answers.widget_name), function(err){
									if(err) {
										console.log(chalk.red(symbols.err + ' ') + chalk.gray(err))
									} else {
										console.log(chalk.green(symbols.ok + ' ') + answers.widget_name + ' ' + chalk.gray('successfully added to your portal enterprise catalog.'))
									}
								})
							}
						})
					})
			})

		} else if ('container' == type) {
			console.log(chalk.gray('You are about to create a container in the path: ' + process.cwd()))

			inquirer.prompt([
				{name: 'container_title', message: 'Container title'},
				{name: 'container_name', message: 'Container name'},
				{name: 'template_name', message: 'Template name', 'default': function(answers){return answers.container_name + '_template'}},
				{name: 'bundle_name', message: 'Bundle name', 'default': getCurrentBundle()},
			], function(answers){

				gulp.src(templatesDir + '/container/**/*')
					.pipe(template(answers))
					.pipe(rename(function(path){
						_.each(answers, function(answer, key){
							path.basename = path.basename.split('{' + key + '}').join(answer)
						})
					}))
					.pipe(conflict('./'))
					.pipe(gulp.dest(answers.container_name))
					.on('end', function(){
						inquirer.prompt({
							name: 'add_container',
							type: 'confirm',
							message: 'Do you want to add this container (with template) to your Enterprise Catalog?'
						}, function(answer){
							if(answer.add_container){
								postContainer(path.join(process.cwd(), answers.container_name), function(err){
									if(err) {
										console.log(chalk.red(symbols.err + ' ') + chalk.gray(err))
									} else {
										console.log(chalk.green(symbols.ok + ' ') + answers.template_name + ' ' + chalk.gray('successfully added to your portal enterprise catalog.'))
										console.log(chalk.green(symbols.ok + ' ') + answers.container_name + ' ' + chalk.gray('successfully added to your portal enterprise catalog.'))
									}
								})
							}
						})
					})

			})
		}
	})


function getCurrentBundle(){
	return process.cwd().split(path.sep).slice(-2)[0];
}

function postItem(url, content, request_callback){
	request({
		'auth': {
			'user': 'admin',
			'pass': 'admin'
		},
		method: 'POST',
		url: url,
		body: content,
		headers: {
			'Content-Type': 'application/xml'
		}
	}, request_callback)
}

function postWidget(widget_path, callback){
	fs.readFile(path.join(widget_path, 'widget_model.xml'), "utf8", function(err, content){
		postItem('http://localhost:'+PORTAL_PORT+'/portalserver/catalog', content, function(err, httpResponse, body){
			if(!err && httpResponse.statusCode == '204') {
				callback()
			} else {
				callback(err || 'Error trying to add the widget trough REST: ' + httpResponse.statusCode)
			}
		})
	})
}

function postContainer(container_path, callback){
	fs.readFile(path.join(container_path, 'template_model.xml'), "utf8", function(err, content){
		postItem('http://localhost:'+PORTAL_PORT+'/portalserver/templates', content, function(err, httpResponse, body){
			if(!err && httpResponse.statusCode == '201') {

				fs.readFile(path.join(container_path, 'container_model.xml'), "utf8", function(err, content){
					postItem('http://localhost:'+PORTAL_PORT+'/portalserver/catalog', content, function(err, httpResponse, body){
						if(!err && httpResponse.statusCode == '204') {
							callback()
						} else {
							callback(err || 'Error trying to add the container trough REST: ' + httpResponse.statusCode)
						}
					})
				})

			} else {
				callback(err || 'Error trying to add the template trough REST: ' + httpResponse.statusCode)
			}
		})
	})
}


program.parse(process.argv);